// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GenerateHeightMapCS

RWTexture2D<float4> Result;

float scale;
float heightMultiplier;
int width;
int height;

float2 random2(float2 p)
{
    return frac(sin(float2(dot(p, float2(127.1, 311.7)), dot(p, float2(269.5, 183.3)))) * 43758.5453f);
}

float surflet(float2 P, float2 gridPoint)
{
    // Compute falloff function by converting linear distance to a polynomial (quintic smootherstep function)
    float distX = abs(P.x - gridPoint.x);
    float distY = abs(P.y - gridPoint.y);

    float tX = 1.f - 6.f * pow(distX, 5.0) + 15.f * pow(distX, 4.0) - 10.f * pow(distX, 3.0);
    float tY = 1.f - 6.f * pow(distY, 5.0) + 15.f * pow(distY, 4.0) - 10.f * pow(distY, 3.0);
    
    // Get the random vector for the grid point
    float2 gradient = 2.f * random2(gridPoint) - float2(1.f, 1.f);
    
    // Get the vector from the grid point to P
    float2 diff = P - gridPoint;

    
    // Get the value of our height field by dotting grid->P with our gradient
    float height = dot(diff, gradient);
    // Scale our height field (i.e. reduce it) by our polynomial falloff function
    return height * tX * tY;
}

float PerlinNoise(float2 uv)
{
    // Tile the space
    float2 uvXLYL = floor(uv);
    float2 uvXHYL = uvXLYL + float2(1, 0);
    float2 uvXHYH = uvXLYL + float2(1, 1);
    float2 uvXLYH = uvXLYL + float2(0, 1);

    return surflet(uv, uvXLYL) + surflet(uv, uvXHYL) + surflet(uv, uvXHYH) + surflet(uv, uvXLYH);
}

[numthreads(8, 8, 1)] // Adjust thread count based on your map size
void GenerateHeightMapCS(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= width || id.y >= height)
    {
        return;
    }
    
    // Convert (x, y) to latitude and longitude
    float u = id.x / (float) width;
    float v = id.y / (float) height;
    float longitude = u * 2.0 * 3.14159265; 
    float latitude = v * 3.14159265; 

    // Map spherical coordinates to 2D noise
    float x = sin(latitude) * cos(longitude);
    float y = cos(latitude);
    float z = sin(latitude) * sin(longitude);

    float2 sphericalCoord = float2(x * scale, z * scale);
     
    // Generate the height value using noise
    float heightValue = PerlinNoise(sphericalCoord) * heightMultiplier;
        
    // Write to the texture as grayscale
    Result[id.xy] = heightValue;

}
