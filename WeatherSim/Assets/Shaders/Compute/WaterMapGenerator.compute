// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GenerateWaterMapCS

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

RWTexture2D<float4> Result;

RWTexture2D<float4> HeightMap;
float waterRatio;
float heightMultiplier;

int width;
int height;

float hash(float n)
{
    return frac(sin(n) * 36759.1723);
}
     
float noise(float3 x)
{
    // The noise function returns a value in the range -1.0f -> 1.0f
    float3 p = floor(x);
    float3 f = frac(x);
     
    f = f * f * (3.0 - 2.0 * f);
    float n = p.x + p.y * 57.0 + 113.0 * p.z;
     
    float val = lerp(lerp(lerp(hash(n + 0.0), hash(n + 1.0), f.x),
               lerp(hash(n + 57.0), hash(n + 58.0), f.x), f.y),
               lerp(lerp(hash(n + 113.0), hash(n + 114.0), f.x),
               lerp(hash(n + 170.0), hash(n + 171.0), f.x), f.y), f.z);
    
    return (val + 1.f) * 0.5f;
}

[numthreads(8,8,1)]
void GenerateWaterMapCS(uint3 id : SV_DispatchThreadID)
{ 
    if (id.x >= width || id.y >= height)
    {
        return;
    }
    // Convert (x, y) to latitude and longitude
    
    float u = id.x / (float) width;
    float v = id.y / (float) height;
    float2 uv = float2(u, v);
    
    const float PI = 3.1415926;
    
    float theta = u * 2.f * PI;
    float phi = (v - 0.5f) * PI;

    float x = cos(phi) * cos(theta);
    float y = sin(phi);
    float z = cos(phi) * sin(theta);
    
    float q = noise(float3(x,y,z) * 7.0f);
    //float q = fbm(uv * 8.0f);

    float normalizedHeight = HeightMap[id.xy].r;
    //Result[id.xy] = clamp(step(0.2f, normalizedHeight),0.01f, 0.98f);
    Result[id.xy] = clamp((q - 0.5f) * 2.0f, 0.1f, 0.99f); // * clamp((step(normalizedHeight, waterRatio) + (1.2f - normalizedHeight) * 0.7f), 0.01f, 0.99f); // * clamp(q * 7.0f, 0.2f, 1.0f);
}
